# From https://github.com/SpectralOps/rust-ci-release-template
# Giving this a try.
name: Experimental Mac Silicon Release
on:
  workflow_dispatch:

env:
  BIN_NAME: momento
  PROJECT_NAME: momento-cli
  REPO_NAME: momentohq/momento-cli
  BREW_TAP: momentohq/homebrew-tap
  CARGO_TERM_COLOR: always
  TEST_AUTH_TOKEN_DEFAULT: ${{ secrets.ALPHA_TEST_AUTH_TOKEN }}
  TEST_AUTH_TOKEN_WITH_PROFILE: ${{ secrets.ALPHA_TEST_AUTH_TOKEN }}
  TEST_CACHE_DEFAULT: "default-cache"
  TEST_CACHE_WITH_PROFILE: "cache-with-profile"
  TEST_PROFILE: "test-profile"


jobs:
  dist:
    name: Dist
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false # don't fail other jobs if one fails
      matrix:
#        build: [x86_64-linux, aarch64-linux, x86_64-macos, x86_64-windows] #, x86_64-win-gnu, win32-msvc
        build: [x86_64-macos] #, x86_64-win-gnu, win32-msvc
        include:
#        - build: x86_64-linux
#          os: ubuntu-20.04
#          rust: stable
#          target: x86_64-unknown-linux-gnu
#          cross: false
#        - build: aarch64-linux
#          os: ubuntu-20.04
#          rust: stable
#          target: aarch64-unknown-linux-gnu
#          cross: true
        - build: x86_64-macos
          os: macos-latest
          rust: stable
          target: x86_64-apple-darwin
          cross: false
#        - build: x86_64-windows
#          os: windows-2019
#          rust: stable
#          target: x86_64-pc-windows-msvc
#          cross: false
        - build: aarch64-macos
          os: macos-latest
          rust: stable
          target: aarch64-apple-darwin
          cross: true

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Install ${{ matrix.rust }} toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}
          override: true

      - name: Create .momento directory
        run: mkdir ~/.momento
      - name: Run momento configure test with default profile created initially
        run: cargo test --test configure_profiles_test --features ${{ matrix.feature }}
      - name: Remove credentials and config files to prepare for the integration tests
        run: |
          rm ~/.momento/credentials
          rm ~/.momento/config
      - name: Create credential file
        run: |
          cat <<EOF > ~/.momento/credentials 
          [default]
          token=$TEST_AUTH_TOKEN_DEFAULT
          [$TEST_PROFILE]
          token=$TEST_AUTH_TOKEN_WITH_PROFILE
          EOF
          cat ~/.momento/credentials
      - name: Create config file
        run: |
          cat <<EOF > ~/.momento/config 
          [default]
          cache=$TEST_CACHE_DEFAULT
          ttl=900
          [$TEST_PROFILE]
          cache=$TEST_CACHE_WITH_PROFILE
          ttl=1000
          EOF
          cat ~/.momento/config
      - name: Run Integration Tests
        run: ./run_test_sequentially.sh

      - name: Build release binary
        uses: actions-rs/cargo@v1
        with:
          use-cross: ${{ matrix.cross }}
          command: build
          args: --release --locked --target ${{ matrix.target }}

      - name: Strip release binary (linux and macos)
        if: matrix.build == 'x86_64-linux' || matrix.build == 'x86_64-macos'
        run: strip "target/${{ matrix.target }}/release/$BIN_NAME"

      - name: Strip release binary (arm)
        if: matrix.build == 'aarch64-linux'
        run: |
          docker run --rm -v \
            "$PWD/target:/target:Z" \
            rustembedded/cross:${{ matrix.target }} \
            aarch64-linux-gnu-strip \
            /target/${{ matrix.target }}/release/$BIN_NAME

      - name: Build archive
        shell: bash
        run: |
          mkdir dist
          if [ "${{ matrix.os }}" = "windows-2019" ]; then
            cp "target/${{ matrix.target }}/release/$BIN_NAME.exe" "dist/"
          else
            cp "target/${{ matrix.target }}/release/$BIN_NAME" "dist/"
          fi

      - uses: actions/upload-artifact@v2.2.4
        with:
          name: bins-${{ matrix.build }}
          path: dist

  publish:
    name: Publish
    needs: [dist]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
        with:
          submodules: false

      - uses: actions/download-artifact@v2
        # with:
        #   path: dist
      # - run: ls -al ./dist
      - run: ls -al bins-*

      - name: Calculate tag name
        run: |
          #name=dev
          #if [[ $GITHUB_REF == refs/tags/v* ]]; then
          #  name=${GITHUB_REF:10}
          #fi
          name=mac-silicon-homebrew-test
          echo ::set-output name=val::$name
          echo TAG=$name >> $GITHUB_ENV
        id: tagname

      - name: Build archive
        shell: bash
        run: |
          set -ex

          rm -rf tmp
          mkdir tmp
          mkdir dist

          for dir in bins-* ; do
              platform=${dir#"bins-"}
              unset exe
              if [[ $platform =~ "windows" ]]; then
                  exe=".exe"
              fi
              pkgname=$PROJECT_NAME-$TAG-$platform
              mkdir tmp/$pkgname
              # cp LICENSE README.md tmp/$pkgname
              mv bins-$platform/$BIN_NAME$exe tmp/$pkgname
              chmod +x tmp/$pkgname/$BIN_NAME$exe

              if [ "$exe" = "" ]; then
                  tar cJf dist/$pkgname.tar.xz -C tmp $pkgname
              else
                  (cd tmp && 7z a -r ../dist/$pkgname.zip $pkgname)
              fi
          done

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: dist/*
          file_glob: true
          tag: ${{ steps.tagname.outputs.val }}
          overwrite: true

      - name: Extract version
        id: extract-version
        run: |
          printf "::set-output name=%s::%s\n" tag-name "${GITHUB_REF#refs/tags/}"

      - uses: mislav/bump-homebrew-formula-action@v1
        with:
          formula-path: ${{env.PROJECT_NAME}}.rb
          homebrew-tap: ${{ env.BREW_TAP }}
          download-url: "https://github.com/${{ env.REPO_NAME }}/releases/download/${{ steps.extract-version.outputs.tag-name }}/${{env.PROJECT_NAME}}-${{ steps.extract-version.outputs.tag-name }}-x86_64-macos.tar.xz"
          commit-message: updating formula for ${{ env.PROJECT_NAME }}
        env:
          COMMITTER_TOKEN: ${{ secrets.COMMITTER_TOKEN }}
