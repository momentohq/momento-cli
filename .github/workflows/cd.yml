name: CD

on:
  workflow_dispatch:
  push:
    branches: [main]
    paths-ignore:
      - "**/Cargo.toml"

env:
  CARGO_TERM_COLOR: always

jobs:
  rustfmt:
    name: rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
          token: ${{ secrets.PRIVATE_REPO_RELEASE_ACCESS }}
      - name: rustfmt
        run: cargo fmt -- --check

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
          token: ${{ secrets.PRIVATE_REPO_RELEASE_ACCESS }}
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt
          override: true

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"

      - name: Set release
        id: semrel
        uses: go-semantic-release/action@v1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          allow-initial-development-versions: true
          force-bump-patch-version: true

      - name: Update Cargo Version and create version-update branch and push to main
        run: |
          git checkout -b version-update/v${{ steps.semrel.outputs.version }}
          chmod +x set_cargo_version.sh
          ./set_cargo_version.sh ${{ steps.semrel.outputs.version }}
          git config user.email "momentobot@users.noreply.github.com"
          git config user.name "momentobot"
          git add .
          git commit -m "momento-cli ${{ steps.semrel.outputs.version }}"
          git push origin version-update/v${{ steps.semrel.outputs.version }}
        shell: bash

      - name: Build
        run: cargo build --verbose

      - name: Create pr in the version-update branch
        id: cpr
        uses: repo-sync/pull-request@v2
        with:
          destination_branch: "version-update/v${{ steps.semrel.outputs.version }}"
          pr_title: "momento-cli version update ${{ github.ref }}"
          pr_body: ":crown: *Automated PR*"
          pr_label: "automation"
          pr_draft: false
          pr_allow_empty: true
          github_token: ${{ secrets.PRIVATE_REPO_RELEASE_ACCESS }}

      - name: Build tar.gz
        run: |
          STASH_SHA=$(git stash create)
          VERSION=${{ steps.semrel.outputs.version }}
          ARCHIVE_FILE=archive-$VERSION.tar.gz
          echo "ARCHIVE_FILE="$ARCHIVE_FILE >> $GITHUB_ENV
          pip install git-archive-all
          git-archive-all --force-submodules $ARCHIVE_FILE
          SHA=$(openssl sha256 < ${ARCHIVE_FILE} | sed 's/.* //')
          echo "SHA="$SHA >> $GITHUB_ENV
          echo "sha is: ${SHA}"
          AUTH="Authorization: token ${{ secrets.PRIVATE_REPO_RELEASE_ACCESS }}"
          LATEST_RELEASE=$(curl -sH "$AUTH" https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/tags/v${VERSION})
          RELEASE_ID=$(echo $LATEST_RELEASE | jq -r .id)
          GH_ASSET="https://uploads.github.com/repos/${GITHUB_REPOSITORY}/releases/${RELEASE_ID}/assets?name=${ARCHIVE_FILE}"
          echo $GH_ASSET
          curl --data-binary @$ARCHIVE_FILE -H "$AUTH" -H "Content-Type: application/octet-stream" $GH_ASSET
        shell: bash

      - name: Check out homebrew-tap
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          repository: momentohq/homebrew-tap
          token: ${{ secrets.PRIVATE_REPO_RELEASE_ACCESS }}

      - name: update homebrew formulae
        run: |
          git checkout -b formula/momento-cli/v${{ steps.semrel.outputs.version }}
          pushd Formula
            sed -i 's/sha256 ".*"/sha256 "${{ env.SHA }}"/g' momento-cli.rb
            sed -i 's/version ".*"/version "${{ steps.semrel.outputs.version }}"/g' momento-cli.rb
            sed -i 's/releases\/download\/.*\/archive-.*.tar.gz/releases\/download\/v${{ steps.semrel.outputs.version }}\/${{ env.ARCHIVE_FILE }}/g' momento-cli.rb
          popd
          git config user.email "momentobot@users.noreply.github.com"
          git config user.name "momentobot"
          git add Cargo.toml
          git commit -m "momento-cli ${{ steps.semrel.outputs.version }}"
          git push origin formula/momento-cli/v${{ steps.semrel.outputs.version }}
