name: CD

on:
  workflow_dispatch:
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '**/Cargo.toml'

env:
  CARGO_TERM_COLOR: always

jobs:
  rustfmt:
    name: rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          # ðŸ¤®
          submodules: true
          token: ${{ secrets.PRIVATE_REPO_RELEASE_ACCESS }}
      - name: rustfmt
        run: cargo fmt -- --check

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with: 
          # ðŸ¤®
          submodules: true
          token: ${{ secrets.PRIVATE_REPO_RELEASE_ACCESS }}
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          components: rustfmt
          override: true
          
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
          
      - name: Set release
        id: semrel
        uses: go-semantic-release/action@v1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          allow-initial-development-versions: true
          force-bump-patch-version: true

      - name: Update Cargo Version
        run: |
          chmod +x set_cargo_version.sh
          ./set_cargo_version.sh 0.0.1
        shell: bash

      - name: Build
        run: cargo build --verbose

      - name: Build tar.gz
        run: |
          STASH_SHA=$(git stash create)
          VERSION=0.0.1
          ARCHIVE_FILE=archive-$VERSION.tar.gz
          echo "ARCHIVE_FILE="$ARCHIVE_FILE >> $GITHUB_ENV
          pip install git-archive-all
          git-archive-all --force-submodules $ARCHIVE_FILE
          ls -lah
        shell: bash
